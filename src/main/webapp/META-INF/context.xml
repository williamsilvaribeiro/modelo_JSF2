<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE xml>
<Context antiJARLocking="true" path="/reiki">

	<Resource
		name = "jdbc/reikiDB"
		auth = "Container"
		type = "javax.sql.DataSource"
		
		driverClassName = "com.mysql.jdbc.Driver"
		username = "root"
		password = "root"
		url = "jdbc:mysql://localhost:3306/dbreiki"
		initialSize = "1"
		maxActive = "10"
		maxIdle = "5"
		maxWait = "-1"
		
		validationQuery = "/* ping */"
		validationQueryTimeout = "-1"
		testOnBorrow = "true"
		testOnReturn = "false"
		
		
		timeBetweenEvictionRunsMillis = "10000"
		numTestsPerEvictionRun = "5"
		minEvictableIdleTimeMillis = "60000"
		testWhileIdle = "true"
		
		removeAbandoned = "true"
		removeAbandonedTimeout = "60"
		logAbandoned = "false"
		
	/>

	<!--
	<Resource
		name = "jdbc/reikiDB"
		auth = "Container"
		type = "javax.sql.DataSource"
		factory = "org.apache.commons.dbcp.BasicDataSourceFactory"
		
		driverClassName = "com.mysql.jdbc.Driver"
		username = "root"
		password = "tokens"
		url = "jdbc:mysql://187.45.232.180:3306/dbreiki"
		initialSize = "1"
		maxActive = "10"
		maxIdle = "5"
		maxWait = "-1"
		
		validationQuery = "/* ping */"
		validationQueryTimeout = "-1"
		testOnBorrow = "true"
		testOnReturn = "false"
		
		
		timeBetweenEvictionRunsMillis = "10000"
		numTestsPerEvictionRun = "5"
		minEvictableIdleTimeMillis = "60000"
		testWhileIdle = "true"
		
		removeAbandoned = "true"
		removeAbandonedTimeout = "60"
		logAbandoned = "false"
		
	/>
	-->

<!--

The configuration properties for Tomcat's standard data source resource factory (org.apache.tomcat.dbcp.dbcp.BasicDataSourceFactory) are as follows:

driverClassName - Fully qualified Java class name of the JDBC driver to be used.
username - Database username to be passed to our JDBC driver.
password - Database password to be passed to our JDBC driver.
url - Connection URL to be passed to our JDBC driver. (For backwards compatibility, the property driverName is also recognized.)
initialSize - The initial number of connections that will be created in the pool during pool initialization. Default: 0
maxActive - The maximum number of connections that can be allocated from this pool at the same time. Default: 8
minIdle - The minimum number of connections that will sit idle in this pool at the same time. Default: 0
maxIdle - The maximum number of connections that can sit idle in this pool at the same time. Default: 8
maxWait - The maximum number of milliseconds that the pool will wait (when there are no available connections) for a connection to be returned before throwing an exception. Default: -1 (infinite)
Some additional properties handle connection validation:

validationQuery - SQL query that can be used by the pool to validate connections before they are returned to the application. If specified, this query MUST be an SQL SELECT statement that returns at least one row.
validationQueryTimeout - Timeout in seconds for the validation query to return. Default: -1 (infinite)
testOnBorrow - true or false: whether a connection should be validated using the validation query each time it is borrowed from the pool. Default: true
testOnReturn - true or false: whether a connection should be validated using the validation query each time it is returned to the pool. Default: false
The optional evictor thread is responsible for shrinking the pool by removing any conections which are idle for a long time. The evictor does not respect minIdle. Note that you do not need to activate the evictor thread if you only want the pool to shrink according to the configured maxIdle property.

The evictor is disabled by default and can be configured using the following properties:

timeBetweenEvictionRunsMillis - The number of milliseconds between consecutive runs of the evictor. Default: -1 (disabled)
numTestsPerEvictionRun - The number of connections that will be checked for idleness by the evitor during each run of the evictor. Default: 3
minEvictableIdleTimeMillis - The idle time in milliseconds after which a connection can be removed from the pool by the evictor. Default: 30*60*1000 (30 minutes)
testWhileIdle - true or false: whether a connection should be validated by the evictor thread using the validation query while sitting idle in the pool. Default: false
Another optional feature is the removal of abandoned connections. A connection is called abandoned if the application does not return it to the pool for a long time. The pool can close such connections automatically and remove them from the pool. This is a workaround for applications leaking connections.

The abandoning feature is disabled by default and can be configured using the following properties:

removeAbandoned - true or false: whether to remove abandoned connections from the pool. Default: false
removeAbandonedTimeout - The number of seconds after which a borrowed connection is assumed to be abandoned. Default: 300
logAbandoned - true or false: whether to log stack traces for application code which abandoned a statement or connection. This adds serious overhead. Default: false
Finally there are various properties that allow further fine tuning of the pool behaviour:

defaultAutoCommit - true or false: default auto-commit state of the connections created by this pool. Default: true
defaultReadOnly - true or false: default read-only state of the connections created by this pool. Default: false
defaultTransactionIsolation - This sets the default transaction isolation level. Can be one of NONE, READ_COMMITTED, READ_UNCOMMITTED, REPEATABLE_READ, SERIALIZABLE. Default: no default set
poolPreparedStatements - true or false: whether to pool PreparedStatements and CallableStatements. Default: false
maxOpenPreparedStatements - The maximum number of open statements that can be allocated from the statement pool at the same time. Default: -1 (unlimited)
defaultCatalog - The name of the default catalog. Default: not set
connectionInitSqls - A list of SQL statements run once after a Connection is created. Separate multiple statements by semicolons (;). Default: no statement
connectionProperties - A list of driver specific properties passed to the driver for creating connections. Each property is given as name=value, multiple properties are separated by semicolons (;). Default: no properties
accessToUnderlyingConnectionAllowed - true or false: whether accessing the underlying connections is allowed. Default: false
For more details, please refer to the commons-dbcp documentation.

-->

</Context>
